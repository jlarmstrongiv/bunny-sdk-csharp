// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Models.PullZone;
using BunnyApiClient.Pullzone.Item.AddAllowedReferrer;
using BunnyApiClient.Pullzone.Item.AddBlockedIp;
using BunnyApiClient.Pullzone.Item.AddBlockedReferrer;
using BunnyApiClient.Pullzone.Item.AddCertificate;
using BunnyApiClient.Pullzone.Item.AddHostname;
using BunnyApiClient.Pullzone.Item.Edgerules;
using BunnyApiClient.Pullzone.Item.Optimizer;
using BunnyApiClient.Pullzone.Item.Originshield;
using BunnyApiClient.Pullzone.Item.PurgeCache;
using BunnyApiClient.Pullzone.Item.RemoveAllowedReferrer;
using BunnyApiClient.Pullzone.Item.RemoveBlockedIp;
using BunnyApiClient.Pullzone.Item.RemoveBlockedReferrer;
using BunnyApiClient.Pullzone.Item.RemoveCertificate;
using BunnyApiClient.Pullzone.Item.RemoveHostname;
using BunnyApiClient.Pullzone.Item.ResetSecurityKey;
using BunnyApiClient.Pullzone.Item.Safehop;
using BunnyApiClient.Pullzone.Item.SetForceSSL;
using BunnyApiClient.Pullzone.Item.Waf;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Pullzone.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \pullzone\{-id}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class ItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The addAllowedReferrer property</summary>
        public global::BunnyApiClient.Pullzone.Item.AddAllowedReferrer.AddAllowedReferrerRequestBuilder AddAllowedReferrer
        {
            get => new global::BunnyApiClient.Pullzone.Item.AddAllowedReferrer.AddAllowedReferrerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addBlockedIp property</summary>
        public global::BunnyApiClient.Pullzone.Item.AddBlockedIp.AddBlockedIpRequestBuilder AddBlockedIp
        {
            get => new global::BunnyApiClient.Pullzone.Item.AddBlockedIp.AddBlockedIpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addBlockedReferrer property</summary>
        public global::BunnyApiClient.Pullzone.Item.AddBlockedReferrer.AddBlockedReferrerRequestBuilder AddBlockedReferrer
        {
            get => new global::BunnyApiClient.Pullzone.Item.AddBlockedReferrer.AddBlockedReferrerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addCertificate property</summary>
        public global::BunnyApiClient.Pullzone.Item.AddCertificate.AddCertificateRequestBuilder AddCertificate
        {
            get => new global::BunnyApiClient.Pullzone.Item.AddCertificate.AddCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The addHostname property</summary>
        public global::BunnyApiClient.Pullzone.Item.AddHostname.AddHostnameRequestBuilder AddHostname
        {
            get => new global::BunnyApiClient.Pullzone.Item.AddHostname.AddHostnameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The edgerules property</summary>
        public global::BunnyApiClient.Pullzone.Item.Edgerules.EdgerulesRequestBuilder Edgerules
        {
            get => new global::BunnyApiClient.Pullzone.Item.Edgerules.EdgerulesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The optimizer property</summary>
        public global::BunnyApiClient.Pullzone.Item.Optimizer.OptimizerRequestBuilder Optimizer
        {
            get => new global::BunnyApiClient.Pullzone.Item.Optimizer.OptimizerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The originshield property</summary>
        public global::BunnyApiClient.Pullzone.Item.Originshield.OriginshieldRequestBuilder Originshield
        {
            get => new global::BunnyApiClient.Pullzone.Item.Originshield.OriginshieldRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The purgeCache property</summary>
        public global::BunnyApiClient.Pullzone.Item.PurgeCache.PurgeCacheRequestBuilder PurgeCache
        {
            get => new global::BunnyApiClient.Pullzone.Item.PurgeCache.PurgeCacheRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The removeAllowedReferrer property</summary>
        public global::BunnyApiClient.Pullzone.Item.RemoveAllowedReferrer.RemoveAllowedReferrerRequestBuilder RemoveAllowedReferrer
        {
            get => new global::BunnyApiClient.Pullzone.Item.RemoveAllowedReferrer.RemoveAllowedReferrerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The removeBlockedIp property</summary>
        public global::BunnyApiClient.Pullzone.Item.RemoveBlockedIp.RemoveBlockedIpRequestBuilder RemoveBlockedIp
        {
            get => new global::BunnyApiClient.Pullzone.Item.RemoveBlockedIp.RemoveBlockedIpRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The removeBlockedReferrer property</summary>
        public global::BunnyApiClient.Pullzone.Item.RemoveBlockedReferrer.RemoveBlockedReferrerRequestBuilder RemoveBlockedReferrer
        {
            get => new global::BunnyApiClient.Pullzone.Item.RemoveBlockedReferrer.RemoveBlockedReferrerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The removeCertificate property</summary>
        public global::BunnyApiClient.Pullzone.Item.RemoveCertificate.RemoveCertificateRequestBuilder RemoveCertificate
        {
            get => new global::BunnyApiClient.Pullzone.Item.RemoveCertificate.RemoveCertificateRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The removeHostname property</summary>
        public global::BunnyApiClient.Pullzone.Item.RemoveHostname.RemoveHostnameRequestBuilder RemoveHostname
        {
            get => new global::BunnyApiClient.Pullzone.Item.RemoveHostname.RemoveHostnameRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resetSecurityKey property</summary>
        public global::BunnyApiClient.Pullzone.Item.ResetSecurityKey.ResetSecurityKeyRequestBuilder ResetSecurityKey
        {
            get => new global::BunnyApiClient.Pullzone.Item.ResetSecurityKey.ResetSecurityKeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The safehop property</summary>
        public global::BunnyApiClient.Pullzone.Item.Safehop.SafehopRequestBuilder Safehop
        {
            get => new global::BunnyApiClient.Pullzone.Item.Safehop.SafehopRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The setForceSSL property</summary>
        public global::BunnyApiClient.Pullzone.Item.SetForceSSL.SetForceSSLRequestBuilder SetForceSSL
        {
            get => new global::BunnyApiClient.Pullzone.Item.SetForceSSL.SetForceSSLRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The waf property</summary>
        public global::BunnyApiClient.Pullzone.Item.Waf.WafRequestBuilder Waf
        {
            get => new global::BunnyApiClient.Pullzone.Item.Waf.WafRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/pullzone/{%2Did}?includeCertificate={includeCertificate}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/pullzone/{%2Did}?includeCertificate={includeCertificate}", rawUrl)
        {
        }
        /// <summary>
        /// [DeletePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_delete)
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task DeleteAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.PullZone.PullZone"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Models.PullZone.PullZone?> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Models.PullZone.PullZone> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Models.PullZone.PullZone>(requestInfo, global::BunnyApiClient.Models.PullZone.PullZone.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [UpdatePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_updatepullzone)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.PullZone.PullZone"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Models.PullZone.PullZone?> PostAsync(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Models.PullZone.PullZone> PostAsync(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Models.PullZone.PullZone>(requestInfo, global::BunnyApiClient.Models.PullZone.PullZone.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [DeletePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_delete)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/pullzone/{%2Did}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder.ItemRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [UpdatePullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_updatepullzone)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Models.PullZone.PullZoneCreate body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/pullzone/{%2Did}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Pullzone.Item.ItemRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [GetPullZone API Docs](https://docs.bunny.net/reference/pullzonepublic_index2)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class ItemRequestBuilderGetQueryParameters 
        {
            /// <summary>Determines if the result hostnames should contain the SSL certificate</summary>
            [QueryParameter("includeCertificate")]
            public bool? IncludeCertificate { get; set; }
        }
    }
}
#pragma warning restore CS0618
