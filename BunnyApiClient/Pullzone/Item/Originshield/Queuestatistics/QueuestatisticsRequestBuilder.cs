// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics
{
    /// <summary>
    /// Builds and executes requests for operations under \pullzone\{-id}\originshield\queuestatistics
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class QueuestatisticsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public QueuestatisticsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/pullzone/{%2Did}/originshield/queuestatistics{?dateFrom,dateTo,hourly}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public QueuestatisticsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/pullzone/{%2Did}/originshield/queuestatistics{?dateFrom,dateTo,hourly}", rawUrl)
        {
        }
        /// <summary>
        /// [GetOriginShieldQueueStatistics API Docs](https://docs.bunny.net/reference/pullzonepublic_originshieldconcurrencystatistics)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsGetResponse?> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder.QueuestatisticsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsGetResponse> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder.QueuestatisticsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsGetResponse>(requestInfo, global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [GetOriginShieldQueueStatistics API Docs](https://docs.bunny.net/reference/pullzonepublic_originshieldconcurrencystatistics)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder.QueuestatisticsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder.QueuestatisticsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Pullzone.Item.Originshield.Queuestatistics.QueuestatisticsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [GetOriginShieldQueueStatistics API Docs](https://docs.bunny.net/reference/pullzonepublic_originshieldconcurrencystatistics)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class QueuestatisticsRequestBuilderGetQueryParameters 
        {
            /// <summary>The start date of the statistics. If no value is passed, the last 30 days will be returned.</summary>
            [QueryParameter("dateFrom")]
            public DateTimeOffset? DateFrom { get; set; }
            /// <summary>The end date of the statistics. If no value is passed, the last 30 days will be returned.</summary>
            [QueryParameter("dateTo")]
            public DateTimeOffset? DateTo { get; set; }
            /// <summary>If true, the statistics data will be returned in hourly grouping.</summary>
            [QueryParameter("hourly")]
            public bool? Hourly { get; set; }
        }
    }
}
#pragma warning restore CS0618
