// <auto-generated/>
#pragma warning disable CS0618
using BunnyApiClient.Models.StreamVideoLibrary;
using BunnyApiClient.Videolibrary.Item;
using BunnyApiClient.Videolibrary.Languages;
using BunnyApiClient.Videolibrary.ResetApiKey;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Videolibrary
{
    /// <summary>
    /// Builds and executes requests for operations under \videolibrary
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class VideolibraryRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The languages property</summary>
        public global::BunnyApiClient.Videolibrary.Languages.LanguagesRequestBuilder Languages
        {
            get => new global::BunnyApiClient.Videolibrary.Languages.LanguagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The resetApiKey property</summary>
        public global::BunnyApiClient.Videolibrary.ResetApiKey.ResetApiKeyRequestBuilder ResetApiKey
        {
            get => new global::BunnyApiClient.Videolibrary.ResetApiKey.ResetApiKeyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the BunnyApiClient.videolibrary.item collection</summary>
        /// <param name="position">The ID of the Video Library that will be returned</param>
        /// <returns>A <see cref="global::BunnyApiClient.Videolibrary.Item.VideolibraryItemRequestBuilder"/></returns>
        public global::BunnyApiClient.Videolibrary.Item.VideolibraryItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::BunnyApiClient.Videolibrary.Item.VideolibraryItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VideolibraryRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/videolibrary?includeAccessKey={includeAccessKey}&page={page}&perPage={perPage}&search={search}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public VideolibraryRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/videolibrary?includeAccessKey={includeAccessKey}&page={page}&perPage={perPage}&search={search}", rawUrl)
        {
        }
        /// <summary>
        /// [ListVideoLibraries API Docs](https://docs.bunny.net/reference/videolibrarypublic_index)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Videolibrary.VideolibraryGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Videolibrary.VideolibraryGetResponse?> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder.VideolibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Videolibrary.VideolibraryGetResponse> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder.VideolibraryRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Videolibrary.VideolibraryGetResponse>(requestInfo, global::BunnyApiClient.Videolibrary.VideolibraryGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [AddVideoLibrary API Docs](https://docs.bunny.net/reference/videolibrarypublic_add)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary?> PostAsync(global::BunnyApiClient.Videolibrary.VideolibraryPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary> PostAsync(global::BunnyApiClient.Videolibrary.VideolibraryPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary>(requestInfo, global::BunnyApiClient.Models.StreamVideoLibrary.VideoLibrary.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [ListVideoLibraries API Docs](https://docs.bunny.net/reference/videolibrarypublic_index)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder.VideolibraryRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder.VideolibraryRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [AddVideoLibrary API Docs](https://docs.bunny.net/reference/videolibrarypublic_add)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Videolibrary.VideolibraryPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Videolibrary.VideolibraryPostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/videolibrary", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Videolibrary.VideolibraryRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [ListVideoLibraries API Docs](https://docs.bunny.net/reference/videolibrarypublic_index)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class VideolibraryRequestBuilderGetQueryParameters 
        {
            [QueryParameter("includeAccessKey")]
            public bool? IncludeAccessKey { get; set; }
            [QueryParameter("page")]
            public int? Page { get; set; }
            [QueryParameter("perPage")]
            public int? PerPage { get; set; }
            /// <summary>The search term that will be used to filter the results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
        }
    }
}
#pragma warning restore CS0618
