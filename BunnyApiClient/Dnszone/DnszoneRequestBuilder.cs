// <auto-generated/>
using BunnyApiClient.Dnszone.Checkavailability;
using BunnyApiClient.Dnszone.Item;
using BunnyApiClient.Models.DnsZone;
using BunnyApiClient.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Dnszone
{
    /// <summary>
    /// Builds and executes requests for operations under \dnszone
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
    public partial class DnszoneRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The checkavailability property</summary>
        public global::BunnyApiClient.Dnszone.Checkavailability.CheckavailabilityRequestBuilder Checkavailability
        {
            get => new global::BunnyApiClient.Dnszone.Checkavailability.CheckavailabilityRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>Gets an item from the BunnyApiClient.dnszone.item collection</summary>
        /// <param name="position">The ID of the DNS Zone that will be returned</param>
        /// <returns>A <see cref="global::BunnyApiClient.Dnszone.Item.ItemRequestBuilder"/></returns>
        public global::BunnyApiClient.Dnszone.Item.ItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("%2Did", position);
                return new global::BunnyApiClient.Dnszone.Item.ItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Dnszone.DnszoneRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DnszoneRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/dnszone?page={page}&perPage={perPage}&search={search}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::BunnyApiClient.Dnszone.DnszoneRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public DnszoneRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/dnszone?page={page}&perPage={perPage}&search={search}", rawUrl)
        {
        }
        /// <summary>
        /// [ListDnsZones API Docs](https://docs.bunny.net/reference/dnszonepublic_index)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Dnszone.DnszoneGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Dnszone.DnszoneGetResponse?> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Dnszone.DnszoneRequestBuilder.DnszoneRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Dnszone.DnszoneGetResponse> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Dnszone.DnszoneRequestBuilder.DnszoneRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Dnszone.DnszoneGetResponse>(requestInfo, global::BunnyApiClient.Dnszone.DnszoneGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [AddDnsZone API Docs](https://docs.bunny.net/reference/dnszonepublic_add)
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Models.DnsZone.DnsZone"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::BunnyApiClient.Models.StructuredBadRequestResponse">When receiving a 400 status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Models.DnsZone.DnsZone?> PostAsync(global::BunnyApiClient.Dnszone.DnszonePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Models.DnsZone.DnsZone> PostAsync(global::BunnyApiClient.Dnszone.DnszonePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::BunnyApiClient.Models.StructuredBadRequestResponse.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Models.DnsZone.DnsZone>(requestInfo, global::BunnyApiClient.Models.DnsZone.DnsZone.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [ListDnsZones API Docs](https://docs.bunny.net/reference/dnszonepublic_index)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Dnszone.DnszoneRequestBuilder.DnszoneRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Dnszone.DnszoneRequestBuilder.DnszoneRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [AddDnsZone API Docs](https://docs.bunny.net/reference/dnszonepublic_add)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Dnszone.DnszonePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::BunnyApiClient.Dnszone.DnszonePostRequestBody body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/dnszone", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::BunnyApiClient.Dnszone.DnszoneRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Dnszone.DnszoneRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Dnszone.DnszoneRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [ListDnsZones API Docs](https://docs.bunny.net/reference/dnszonepublic_index)
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.17.0")]
        public partial class DnszoneRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public int? Page { get; set; }
            [QueryParameter("perPage")]
            public int? PerPage { get; set; }
            /// <summary>The search term that will be used to filter the results</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("search")]
            public string? Search { get; set; }
#nullable restore
#else
            [QueryParameter("search")]
            public string Search { get; set; }
#endif
        }
    }
}
