// <auto-generated/>
using BunnyApiClient.Abusecase.Item;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Abusecase
{
    /// <summary>
    /// Builds and executes requests for operations under \abusecase
    /// </summary>
    public class AbusecaseRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the BunnyApiClient.abusecase.item collection</summary>
        /// <param name="position">Unique identifier of the item</param>
        /// <returns>A <see cref="BunnyApiClient.Abusecase.Item.AbusecaseItemRequestBuilder"/></returns>
        public global::BunnyApiClient.Abusecase.Item.AbusecaseItemRequestBuilder this[long position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::BunnyApiClient.Abusecase.Item.AbusecaseItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Abusecase.AbusecaseRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AbusecaseRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/abusecase?page={page}&perPage={perPage}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Abusecase.AbusecaseRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AbusecaseRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/abusecase?page={page}&perPage={perPage}", rawUrl)
        {
        }
        /// <summary>
        /// [ListAbuseCases API Docs](https://docs.bunny.net/reference/abusecasepublic_index)
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Abusecase.AbusecaseGetResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::BunnyApiClient.Abusecase.AbusecaseGetResponse?> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder.AbusecaseRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::BunnyApiClient.Abusecase.AbusecaseGetResponse> GetAsync(Action<RequestConfiguration<global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder.AbusecaseRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::BunnyApiClient.Abusecase.AbusecaseGetResponse>(requestInfo, global::BunnyApiClient.Abusecase.AbusecaseGetResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [ListAbuseCases API Docs](https://docs.bunny.net/reference/abusecasepublic_index)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder.AbusecaseRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder.AbusecaseRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Abusecase.AbusecaseRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Abusecase.AbusecaseRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [ListAbuseCases API Docs](https://docs.bunny.net/reference/abusecasepublic_index)
        /// </summary>
        public class AbusecaseRequestBuilderGetQueryParameters 
        {
            [QueryParameter("page")]
            public int? Page { get; set; }
            [QueryParameter("perPage")]
            public int? PerPage { get; set; }
        }
    }
}
