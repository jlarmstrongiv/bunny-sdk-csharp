// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace BunnyApiClient.Storagezone.ResetReadOnlyPassword
{
    /// <summary>
    /// Builds and executes requests for operations under \storagezone\resetReadOnlyPassword
    /// </summary>
    public class ResetReadOnlyPasswordRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetReadOnlyPasswordRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/storagezone/resetReadOnlyPassword?id={id}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public ResetReadOnlyPasswordRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/storagezone/resetReadOnlyPassword?id={id}", rawUrl)
        {
        }
        /// <summary>
        /// [ResetReadOnlyPassword API Docs](https://docs.bunny.net/reference/storagezonepublic_resetreadonlypassword)
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(Action<RequestConfiguration<global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder.ResetReadOnlyPasswordRequestBuilderPostQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(Action<RequestConfiguration<global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder.ResetReadOnlyPasswordRequestBuilderPostQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPostRequestInformation(requestConfiguration);
            await RequestAdapter.SendNoContentAsync(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [ResetReadOnlyPassword API Docs](https://docs.bunny.net/reference/storagezonepublic_resetreadonlypassword)
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder.ResetReadOnlyPasswordRequestBuilderPostQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(Action<RequestConfiguration<global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder.ResetReadOnlyPasswordRequestBuilderPostQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder WithUrl(string rawUrl)
        {
            return new global::BunnyApiClient.Storagezone.ResetReadOnlyPassword.ResetReadOnlyPasswordRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [ResetReadOnlyPassword API Docs](https://docs.bunny.net/reference/storagezonepublic_resetreadonlypassword)
        /// </summary>
        public class ResetReadOnlyPasswordRequestBuilderPostQueryParameters 
        {
            [QueryParameter("id")]
            public long? Id { get; set; }
        }
    }
}
